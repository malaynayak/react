{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","shared/utility.js","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","validationError","className","ValidationError","elementType","value","join","elementConfig","onChange","changed","options","map","option","key","displayName","Input","Lebel","label","module","exports","checkValidity","rules","isValid","required","trim","minLength","length","maxLength","email","test","checkoutSummary","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","type","placeholder","validation","valid","street","zipCode","maxLenght","country","deliveryMethod","formIsValid","orderHandeler","event","preventDefault","formData","formElementIdentifier","order","price","orderData","userId","onOrderBurger","token","inputChangedHandeler","inputIdentifier","updatedOrderForm","updatedFormElement","target","setState","formsElementsArray","this","id","config","form","onSubmit","formElement","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutContinuedHandler","history","replace","checkoutCancelledHandeler","goBack","summary","to","purchasedRedirect","purchased","path","match","component"],"mappings":"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","file":"static/js/3.94bb4bca.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n    \r\n    let validationError = null;\r\n    if (props.invalid && props.touched) {\r\n        validationError = <p className={classes.ValidationError}>Please enter a valid value !</p>;\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input\r\n                value={props.value}\r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig}\r\n                onChange={props.changed} />;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea\r\n                value={props.value}\r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig}\r\n                onChange={props.changed} />;\r\n            break;\r\n        case ('select'):\r\n            inputElement = (\r\n                <select value={props.value} className={inputClasses.join(' ')}\r\n                    onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option \r\n                            key={option.value} \r\n                            value={option.value}>\r\n                            {option.displayName}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input \r\n                value={props.value}\r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig}\r\n                onChange={props.changed} />;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Lebel}>{props.label}</label>\r\n            {inputElement}\r\n            {validationError}\r\n        </div>\t\r\n    );\r\n};\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__11w2K\",\"Label\":\"Input_Label__MW-i8\",\"InputElement\":\"Input_InputElement__3_0Sd\",\"Invalid\":\"Input_Invalid__eKJs1\",\"ValidationError\":\"Input_ValidationError__2ZjiX\"};","export const checkValidity = (value, rules) => {\r\n    let isValid = true;\r\n    if (rules.required) {\r\n        isValid = value.trim() !== '' && isValid;\r\n    }\r\n    if (rules.minLength) {\r\n        isValid = value.trim().length >= rules.minLength && isValid;\r\n    }\r\n    if (rules.maxLength) {\r\n        isValid = value.trim().length <= rules.maxLength && isValid;\r\n    }\r\n    if (rules.email) {\r\n        const reg = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n        isValid = reg.test(value.trim()) && isValid;\r\n    }\r\n    return isValid;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__31abI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__28uNH\"};","import React from 'react';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport classes from './CheckoutSummary.module.css';\r\n\r\nconst checkoutSummary = (props) => {\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>We hope it tastes well!</h1>\r\n            <div style={{width: '100%', margin: 'auto'}}>\r\n                <Burger ingredients={props.ingredients}/>\r\n            </div>\r\n            <Button\r\n                btnType=\"Danger\"\r\n                clicked={props.checkoutCancelled}>CANCEL</Button>\r\n            <Button\r\n                btnType=\"Success\"\r\n                clicked={props.checkoutContinued}>CONTINUE</Button>\r\n        </div>\t\r\n    );\r\n};\r\n\r\nexport default checkoutSummary;","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner'\r\nimport classes from './ContactData.module.css';\r\nimport axios  from '../../../axios-order';\r\nimport Input  from '../../../components/UI/Input/Input';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/order';\r\nimport { checkValidity } from '../../../shared/utility';\r\n\r\nclass ContactData extends Component {\r\n    \r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: true\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'ZIP Code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLenght: 5\r\n                },\r\n                valid: true\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: true\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Your Email'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    email: true\r\n                },\r\n                valid: true\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        {value: 'fastest', displayName: 'Fastest'},\r\n                        {value: 'standard', displayName: 'Standard'},\r\n                        {value: 'cheapest', displayName: 'Cheapest'}\r\n                    ]\r\n                },\r\n                value: 'standard',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: true,\r\n                touched: false\r\n            }\r\n        },\r\n        formIsValid: false,\r\n    }\r\n\r\n    orderHandeler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const formData = {};\r\n        for (let formElementIdentifier in this.state.orderForm) {\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n        const order = {\r\n            ingredients : this.props.ingredients,\r\n            price: this.props.price,\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        };\r\n        this.props.onOrderBurger(order, this.props.token);\r\n    }\r\n\r\n    inputChangedHandeler = (event, inputIdentifier) =>{\r\n        const updatedOrderForm = { ...this.state.orderForm };\r\n        const updatedFormElement = {\r\n            ...updatedOrderForm[inputIdentifier]\r\n        };\r\n        updatedFormElement.value = event.target.value;\r\n        updatedFormElement.valid = checkValidity(updatedFormElement.value, updatedFormElement.validation);\r\n        updatedFormElement.touched = true;\r\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\r\n\r\n        let formIsValid = true;\r\n        for (let inputIdentifier in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({\r\n            orderForm: updatedOrderForm,\r\n            formIsValid: formIsValid\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const formsElementsArray = [];\r\n        for (let key in this.state.orderForm) {\r\n            formsElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            })\r\n        }\r\n        let form  = (\r\n            <form onSubmit={this.orderHandeler}>\r\n                {\r\n                    formsElementsArray.map(formElement => (\r\n                        <Input \r\n                            changed={(event) => this.inputChangedHandeler(event, formElement.id) }\r\n                            key={formElement.id}\r\n                            elementType={formElement.config.elementType} \r\n                            elementConfig={formElement.config.elementConfig}\r\n                            invalid={!formElement.config.valid}\r\n                            shouldValidate={formElement.config.validation}\r\n                            touched={formElement.config.touched}\r\n                            value={formElement.config.value} />\r\n                    ))\r\n                }\r\n                <Button\r\n                    disabled={!this.state.formIsValid}\r\n                    clicked={this.orderHandeler} \r\n                    btnType=\"Success\">ORDER</Button>\r\n            </form>\r\n        );\r\n        if (this.props.loading) {\r\n            form = <Spinner />;\r\n        }\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter You Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ingredients: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));\r\n","import React, {Component} from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport ContactData from '../../containers/Checkout/ContactData/ContactData';\r\nimport * as actions from '../../store/actions/index';\r\n\r\nclass Checkout extends Component {\r\n\r\n    checkoutContinuedHandler = () => {\r\n        this.props.history.replace('/checkout/contact-data');\r\n    }\r\n\r\n    checkoutCancelledHandeler = () => {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    render() {\r\n        let summary = <Redirect to=\"/\" />;\r\n        \r\n        if (this.props.ingredients) {\r\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" />: null;\r\n            summary = (\r\n                <div>\r\n                    { purchasedRedirect }\r\n                    <CheckoutSummary\r\n                        checkoutContinued={this.checkoutContinuedHandler}\r\n                        checkoutCancelled={this.checkoutCancelledHandeler}\r\n                        ingredients={this.props.ingredients} />\r\n                    <Route \r\n                        path={this.props.match.path + '/contact-data' }\r\n                        component={ContactData}\r\n                        />\r\n                </div>\r\n            );\r\n        }\r\n        return summary;\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ingredients: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);"],"sourceRoot":""}