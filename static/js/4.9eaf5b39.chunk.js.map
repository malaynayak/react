{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","shared/utility.js","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","validationError","className","ValidationError","elementType","value","join","elementConfig","onChange","changed","options","map","option","key","displayName","Input","Lebel","label","module","exports","checkValidity","rules","isValid","required","trim","minLength","length","maxLength","email","test","Auth","state","controls","type","placeholder","validation","valid","password","isSignUp","formIsValid","switchAuthModeHandler","event","preventDefault","setState","prevState","inputChangedHandeler","controlName","updatedControls","target","submitHandler","onAuth","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formsElementsArray","id","config","form","formElement","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","onSubmit","clicked","btnType","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/4.9eaf5b39.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n    \r\n    let validationError = null;\r\n    if (props.invalid && props.touched) {\r\n        validationError = <p className={classes.ValidationError}>Please enter a valid value !</p>;\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input\r\n                value={props.value}\r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig}\r\n                onChange={props.changed} />;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea\r\n                value={props.value}\r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig}\r\n                onChange={props.changed} />;\r\n            break;\r\n        case ('select'):\r\n            inputElement = (\r\n                <select value={props.value} className={inputClasses.join(' ')}\r\n                    onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option \r\n                            key={option.value} \r\n                            value={option.value}>\r\n                            {option.displayName}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input \r\n                value={props.value}\r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig}\r\n                onChange={props.changed} />;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Lebel}>{props.label}</label>\r\n            {inputElement}\r\n            {validationError}\r\n        </div>\t\r\n    );\r\n};\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__11w2K\",\"Label\":\"Input_Label__MW-i8\",\"InputElement\":\"Input_InputElement__3_0Sd\",\"Invalid\":\"Input_Invalid__eKJs1\",\"ValidationError\":\"Input_ValidationError__2ZjiX\"};","export const checkValidity = (value, rules) => {\r\n    let isValid = true;\r\n    if (rules.required) {\r\n        isValid = value.trim() !== '' && isValid;\r\n    }\r\n    if (rules.minLength) {\r\n        isValid = value.trim().length >= rules.minLength && isValid;\r\n    }\r\n    if (rules.maxLength) {\r\n        isValid = value.trim().length <= rules.maxLength && isValid;\r\n    }\r\n    if (rules.email) {\r\n        const reg = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n        isValid = reg.test(value.trim()) && isValid;\r\n    }\r\n    return isValid;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__2AFbe\",\"ContactData\":\"Auth_ContactData__1DkED\"};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport classes from './Auth.module.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport { checkValidity } from '../../shared/utility';\r\n\r\nclass Auth extends Component {\r\n\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Email'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    email: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: true\r\n            },\r\n        },\r\n        isSignUp: true,\r\n        formIsValid: false,\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    switchAuthModeHandler = (event) => {\r\n        event.preventDefault();\r\n        this.setState(prevState => {\r\n            return {isSignUp: !prevState.isSignUp}\r\n        })\r\n    }\r\n\r\n    inputChangedHandeler = (event, controlName) =>{\r\n        const updatedControls = {\r\n            ...this.state.controls,\r\n            [controlName]: {\r\n                ...this.state.controls[controlName],\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            }\r\n        }\r\n        this.setState({controls: updatedControls});\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(\r\n            this.state.controls.email.value,\r\n            this.state.controls.password.value,\r\n            this.state.isSignUp\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const formsElementsArray = [];\r\n        for (let key in this.state.controls) {\r\n            formsElementsArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            })\r\n        }\r\n        let form = formsElementsArray.map(formElement => (\r\n            <Input \r\n                changed={(event) => this.inputChangedHandeler(event, formElement.id) }\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType} \r\n                elementConfig={formElement.config.elementConfig}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                value={formElement.config.value} />\r\n            \r\n        ));\r\n\r\n        if (this.props.loading) {\r\n            form = <Spinner />\r\n        }\r\n        let errorMessage = null;\r\n        if (this.props.error) {\r\n            errorMessage = <p>{ this.props.error.message }</p>\r\n        }\r\n\r\n        let authRedirect= null;\r\n        if (this.props.isAuthenticated) {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n        }\r\n\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                { errorMessage } \r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button\r\n                        clicked={this.submitHandler}\r\n                        btnType=\"Success\">SUBMIT</Button>\r\n                    <Button\r\n                        clicked={this.switchAuthModeHandler}\r\n                        btnType=\"Danger\">SWITCH TO {this.state.isSignUp ? 'SIGN IN' : 'SIGN UP' }</Button>\r\n                </form>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n};\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"],"sourceRoot":""}